{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0

dependencies:
- base >= 4.7 && < 5
- text
- containers
- nonempty-containers
- async
- mtl
- optparse-applicative
- optparse-generic
- aeson
- generic-aeson

default-extensions:
- OverloadedStrings

ghc-options:
  - -Wall
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints
  - -Wunused-packages

library:
  source-dirs: src

executables:
  {{name}}-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - hspec
    - hspec-discover
    - QuickCheck
    - neat-interpolation


verbatim:
  cabal-version: 3.0
{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/AppSpec.hs #-}
module AppSpec where

import App
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck.Property

spec :: Spec
spec = describe "Simple test" $ do

     it "example-based unit test" $
        1 `shouldBe` 1

     prop "property-based unit test" $
        \l -> reverse ( reverse l ) == ( l::[Int])


{-# START_FILE src/App.hs #-}
module App where

program :: IO ()
program = putStrLn "hello!"

{-# START_FILE app/Main.hs #-}
module Main where

import App

main :: IO ()
main = program

{-# START_FILE README.md #-}
# {{name}}

## How to build and run locally

The project uses the [Haskell tool stack](https://docs.haskellstack.org/en/stable/README/).

Assuming `stack` is installed in the system, the project can be build by running
```
stack build
```
To build and also run the tests, run
```
stack test
```
which is equivalent to
```
stack build --test
```
To run with test coverage
```
stack test --coverage
```
which generates a textual and HTML report.

To run the executable,
```
stack exec {{name}}-exe
```
For faster feedback loop,
```
stack test --fast --file-watch
```
To run `ghci` (with a version compatible with the resolver) run
```
stack ghci
```
For more information, refer to the `stack` official docs.

{-# START_FILE .github/workflows/ci.yml #-}
{{=<% %>=}}
name: CI

on:
  push:
    branches: [ main, 'feature/*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # enable manual execution

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  stack:

    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        stack: ["2.9.1"]
        ghc: ["9.2.5"]

    steps:

    - name: Checkout repo 
      uses: actions/checkout@v3

    - name: Restore from cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.stack
          ~/.ghcup
        key: ${{ runner.os }}-${{ matrix.ghc }}-stack${{ matrix.stack }}

    - name: Setup Haskell Stack
      uses: haskell/actions/setup@v1
      with:
        ghc-version: ${{ matrix.ghc }}
        stack-version: ${{ matrix.stack }}
        enable-stack: true


    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      timeout-minutes: 15
      run: |
        stack build --system-ghc --test --no-run-tests --only-dependencies

    - name: Run tests with coverage
      timeout-minutes: 15
      run: |
        stack test --system-ghc --test --coverage --fast

    - name: Build
      timeout-minutes: 15
      run: |
        stack build --system-ghc --test --no-run-tests

    - name: Generate coverage report
      uses: 8c6794b6/hpc-codecov-action@v3
      with:
        target: stack:<%name%>-test
        out: ./codecov.json
        verbose: true

    - name: Send coverage report
      uses: codecov/codecov-action@v2
      with:
        files: ./codecov.json
        fail_ci_if_error: false # optional (default = false)
        verbose: true
<%={{ }}=%>
{-# START_FILE hie.yaml #-}
cradle:
  stack:
    - path: "./src"
      component: "{{name}}:lib"

    - path: "./app/Main.hs"
      component: "{{name}}:exe:{{name}}-exe"

    - path: "./app/Paths_{{name}}.hs"
      component: "{{name}}:exe:{{name}}-exe"

    - path: "./test"
      component: "{{name}}:test:{{name}}-test"


{-# START_FILE .gitignore #-}
# Stack
.stack-work
stack.yaml.lock
.stack-work/
.stack/
*~
*.swp
*.swo
.DS_Store
# IDE
.idea/
# Aux files
*.o
*.hi
*.hie
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
*.prof
*.aux
*.hp
*.eventlog
{{name}}.cabal
hls.log
cabal.project.local
cabal.project.local~
.ghc.environment.*
