{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
description:         "{{name}}"

dependencies:
- base >= 4.7 && < 5
- text
- containers
- vector
- split
- safe
- either
- megaparsec
- optparse-applicative
- witherable
- neat-interpolation
- recursion-schemes
- data-fix
- pretty
- comonad
- adjunctions

default-extensions:
- OverloadedStrings

ghc-options:
  - -Wall
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints
  - -Wunused-packages
  - -O2

library:
  source-dirs: src

executables:
  {{name}}:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    - -O0 # No optimisation for faster test runs
    dependencies:
    - {{name}}
    - hspec
    - QuickCheck
    build-tools:
    - hspec-discover

verbatim:
  cabal-version: 3.0
{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/SpecHook.hs #-}
module SpecHook where

import Test.Hspec ( parallel, Spec )

hook :: Spec -> Spec
hook = parallel
{-# START_FILE test/AppSpec.hs #-}
module AppSpec where

import App
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck.Property

spec :: Spec
spec = describe "Simple test" $ do

     it "example-based unit test" $
        1 `shouldBe` 1

     prop "property-based unit test" $
        \l -> reverse ( reverse l ) == ( l::[Int])

{-# START_FILE test/ArgsSpec.hs #-}
module ArgsSpec where

import Args
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck.Property
import Options.Applicative (ParserResult(Success))
import Options.Applicative (ParserResult(Failure))

parseArgsMaybe = transform . parseArgs where
  transform (Success a) = Right a
  transform (Failure failure) = Left (show failure)
  transform _ = Left "completion"

spec :: Spec
spec = describe "Args parser" $ do

     it "is able to parse a valid command" $
        parseArgsMaybe ["-d", "1", "-f", "file"] `shouldBe` Right (Args 1 "file")

{-# START_FILE src/App.hs #-}
module App where

import Args 
import Options.Applicative ( handleParseResult )
import System.Environment (getArgs)
import Day1 ( program )
import Day2 ( program )
import Day3 ( program )
import Day4 ( program )
import Day5 ( program )
import Day6 ( program )
import Day7 ( program )
import Day8 ( program )
import Day9 ( program )
import Day10 ( program )

program :: IO ()
program =
  getArgs >>= (handleParseResult . parseArgs) >>= program'

program' :: Args -> IO ()
program' (Args 1 f) = Day1.program f
program' (Args 2 f) = Day2.program f
program' (Args 3 f) = Day3.program f
program' (Args 4 f) = Day4.program f
program' (Args 5 f) = Day5.program f
program' (Args 6 f) = Day6.program f
program' (Args 7 f) = Day7.program f
program' (Args 8 f) = Day8.program f
program' (Args 9 f) = Day9.program f
program' (Args 10 f) = Day10.program f
program' _ = putStrLn "day not found"

{-# START_FILE app/Main.hs #-}
module Main where

import App

main :: IO ()
main = program

{-# START_FILE src/Args.hs #-}
module Args where
import Options.Applicative

data Args = Args {
   day :: Int,
   input :: FilePath
   } deriving (Eq,Show)

argsParser :: Parser Args
argsParser = Args <$> option auto
            ( long "day"
           <> short 'd'
           <> help "day" ) <*> strOption ( long "filename"
           <> short 'f'
           <> help "filename" )

withInfo :: Parser a -> String -> ParserInfo a
withInfo p s = info (helper <*> p) (fullDesc  <> progDesc s)

parseArgs :: [String] -> ParserResult Args
parseArgs = execParserPure preferences parserInfo where
   parserInfo = withInfo argsParser "Advent of code"
   preferences = prefs (disambiguate <> showHelpOnEmpty <> showHelpOnError)

{-# START_FILE src/Day1.hs #-}
module Day1 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer

{-# START_FILE src/Day2.hs #-}
module Day2 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/Day3.hs #-}
module Day3 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/Day4.hs #-}
module Day4 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/Day5.hs #-}
module Day5 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/Day6.hs #-}
module Day6 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/Day7.hs #-}
module Day7 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/Day8.hs #-}
module Day8 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/Day9.hs #-}
module Day9 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/Day10.hs #-}
module Day10 where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE src/DayN.hs #-}
module DayN where
import qualified Data.Text as T
import qualified Data.Text.IO as T

program :: FilePath -> IO ()
program = (=<<) print . fmap logic . T.readFile

data Answer = Answer deriving (Eq, Show)

logic :: T.Text -> Answer
logic = const Answer
{-# START_FILE test/Day1Spec.hs #-}
module Day1Spec where

import Day1
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 1" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input1"
     logic input `shouldBe` Answer
{-# START_FILE test/Day2Spec.hs #-}
module Day2Spec where

import Day2
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 2" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input2"
     logic input `shouldBe` Answer
{-# START_FILE test/Day3Spec.hs #-}
module Day3Spec where

import Day3
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 3" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input3"
     logic input `shouldBe` Answer
{-# START_FILE test/Day4Spec.hs #-}
module Day4Spec where

import Day4
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 4" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input4"
     logic input `shouldBe` Answer
{-# START_FILE test/Day5Spec.hs #-}
module Day5Spec where

import Day5
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 5" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input5"
     logic input `shouldBe` Answer
{-# START_FILE test/Day6Spec.hs #-}
module Day6Spec where

import Day6
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 5" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input6"
     logic input `shouldBe` Answer
{-# START_FILE test/Day7Spec.hs #-}
module Day7Spec where

import Day7
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 5" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input7"
     logic input `shouldBe` Answer
{-# START_FILE test/Day8Spec.hs #-}
module Day8Spec where

import Day8
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 5" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input8"
     logic input `shouldBe` Answer
{-# START_FILE test/Day9Spec.hs #-}
module Day9Spec where

import Day9
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 5" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input9"
     logic input `shouldBe` Answer
{-# START_FILE test/Day10Spec.hs #-}
module Day10Spec where

import Day10
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day 5" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/input10"
     logic input `shouldBe` Answer
{-# START_FILE test/DayNSpec.hs #-}
module DayNSpec where

import DayN
import Test.Hspec
import Test.Hspec.QuickCheck
import Test.QuickCheck
import qualified Data.Text as T
import qualified Data.Text.IO as T

spec :: Spec
spec = describe "Day N" $ do
  it ""
    $ 1
    `shouldBe` 1

  prop ""
    $ \l -> reverse (reverse l) == (l :: [Int])

  xit "solve the puzzle" $ do
     input <- T.readFile "resources/inputN"
     logic input `shouldBe` Answer
{-# START_FILE README.md #-}
# {{name}}

## How to build and run locally

The project uses the [Haskell tool stack](https://docs.haskellstack.org/en/stable/README/). The recommended way to install stack is by using [ghcup](https://www.haskell.org/ghcup/).
It's also possible to use [the nix package manager](https://nixos.org/), but this project does not provide a nix configuration file.

Assuming `stack` is installed in the system, to **build** the project use
```
stack build
```
To **build and run the tests**, run
```
stack test
```
or equivalently
```
stack build --test
```
For **faster feedback loop** during development, it's possible to run tests continuously on every file change:
```
stack test --fast --file-watch
```
To run tests with **test coverage** instrumentation,
```
stack test --coverage
```
which generates a textual and HTML report.

Note: Tests are run in the CI and test coverage reports are automatically uploaded to codecov.

To **run** the executable via slack,
```
stack exec {{name}}
```
or passing arguments
```
stack exec {{name}} -- -d <day> -f <filename>
```

To **install** the executable under `~/.local/bin`,
```
stack install
```
and the executable can be run with `{{name}}` assuming `~/.local/bin` is in the `$PATH` variable.

To run a version of **ghci** compatible with the resolver
```
stack ghci
```
For more information about how to use `stack`, refer to the [official docs](https://docs.haskellstack.org/en/stable/).

This projects uses [optparse-applicative](https://hackage.haskell.org/package/optparse-applicative) to implement command-line arguments parsing. Optparse-applicative automatically generates an helper from code. It's recommended to use the generated helper to explore all the available CLI options.
{-# START_FILE .github/workflows/ci.yml #-}
{{=<% %>=}}
name: Compile and run tests

on:
  push:
    branches: [ main, feature/** ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # enable manual execution

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  stack:

    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        stack: ["3.1.1"]
        ghc: ["9.6.6"]

    steps:

    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Cache stack installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.stack/build-plan
          ~/.stack/indices
          ~/.stack/snapshots
          ~/.stack/global-project/.stack-work/install
        key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-stack-${{ matrix.stack }}-${{ hashFiles('stack.yaml', 'stack.yaml.lock') }}
        restore-keys: |
          ${{ runner.os }}-ghc-${{ matrix.ghc }}-stack-${{ matrix.stack }}-

    - name: Cache GHC installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.ghcup/ghc/${{ matrix.ghc }}
          ~/.ghcup/bin/stack-${{ matrix.stack }}
        key: ${{ runner.os }}-ghc-${{ matrix.ghc }}-stack-${{ matrix.stack }}

    - name: Setup Haskell Stack
      uses: haskell-actions/setup@v2
      with:
        ghc-version: ${{ matrix.ghc }}
        stack-version: ${{ matrix.stack }}
        enable-stack: true

    - name: Install dependencies
      if: steps.cache.outputs.cache-hit != 'true' && success()
      timeout-minutes: 15
      run: |
        stack build --system-ghc --test --no-run-tests --only-dependencies

    - name: Run tests with coverage
      timeout-minutes: 15
      run: |
        stack test --system-ghc --test --coverage --fast

    - name: Build
      timeout-minutes: 15
      run: |
        stack build --system-ghc --test --no-run-tests

    - name: Generate coverage report
      uses: 8c6794b6/hpc-codecov-action@v3
      with:
        target: stack:<%name%>-test
        out: ./codecov.json
        verbose: true

    - name: Send coverage report
      uses: codecov/codecov-action@v4
      with:
        files: ./codecov.json
        fail_ci_if_error: false # optional (default = false)
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
<%={{ }}=%>
{-# START_FILE .gitignore #-}
# Stack
.stack-work/
.stack/
*~
*.swp
*.swo
.DS_Store
# IDE
.idea/
# Aux files
*.o
*.hi
*.hie
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
*.prof
*.aux
*.hp
*.eventlog
{{name}}.cabal
hls.log
cabal.project.local
cabal.project.local~
.ghc.environment.*
