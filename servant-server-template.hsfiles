{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0

dependencies:
- base >= 4.7 && < 5
- text
- containers
- servant
- servant-server
- aeson
- generic-aeson
- wai
- warp

default-extensions:
- OverloadedStrings

ghc-options:
  - -Wall
  - -Wincomplete-record-updates
  - -Wincomplete-uni-patterns
  - -Wredundant-constraints

library:
  source-dirs: src

executables:
  {{name}}-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}
    - hspec
    - hspec-discover
    - QuickCheck
    - hspec-wai
    - hspec-wai-json

verbatim:
  cabal-version: 3.0
{-# START_FILE test/Spec.hs #-}
{-# OPTIONS_GHC -F -pgmF hspec-discover #-}

{-# START_FILE test/ServerSpec.hs #-}
module ServerSpec where

import Server (app)
import Test.Hspec (Spec, describe, it, shouldBe)
import Test.Hspec.QuickCheck (prop)
import Test.Hspec.Wai (get, shouldRespondWith, with)
import Test.QuickCheck.Property ()

spec :: Spec
spec = describe "Simple test" $ do
  it "example-based unit test" $
    1 `shouldBe` 1

  prop "property-based unit test" $
    \l -> reverse (reverse l) == (l :: [Int])

  with (return app) $ do
    describe "GET /status" $ do
      it "responds with 200" $ do
        get "/status" `shouldRespondWith` 200

      it "responds with ok status" $ do
        let response = "{\"status\":\"ok\"}"
        get "/status" `shouldRespondWith` response

{-# START_FILE src/Server.hs #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE TypeOperators #-}

module Server where

import Data.Aeson (ToJSON)
import Data.Data (Proxy (Proxy))
import GHC.Generics (Generic)
import Network.Wai (Application)
import Network.Wai.Handler.Warp (run)
import Servant (Get, Server, (:>))
import Servant.API (JSON)
import Servant.Server (serve)

newtype StatusResponse = StatusResponse
  { status :: String
  }
  deriving (Generic, Eq, Show, Ord)

instance ToJSON StatusResponse

type StatusEndpoint = "status" :> Get '[JSON] StatusResponse

type API = StatusEndpoint 

api :: Proxy API
api = Proxy

app :: Application
app = serve api server

startServer :: IO ()
startServer = run 8080 app

server :: Server API
server = pure ok where 
   ok = StatusResponse "ok"

{-# START_FILE app/Main.hs #-}
module Main where

import Server

main :: IO ()
main = startServer

{-# START_FILE README.md #-}
# {{name}}

## How to build and run locally

The project uses the [Haskell tool stack](https://docs.haskellstack.org/en/stable/README/).

Assuming `stack` is installed in the system, the project can be build by running
```
stack build
```
To build and also run the tests, run
```
stack test
```
which is equivalent to
```
stack build --test
```
To run the executable,
```
stack exec {{name}}-exe
```
For a faster feedback loop,
```
stack test --fast --file-watch
```
To run `ghci` (with a version compatible with the resolver) run
```
stack ghci
```
For more information, refer to the `stack` official docs.

{-# START_FILE .github/workflows/ci.yml #-}
{{=<% %>=}}
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # enable manual execution

jobs:
  build:

    name: ${{ matrix.os }} / ghc ${{ matrix.ghc }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        stack: ["2.5.1"]
        ghc: ["8.10.4"]

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1
      with:
        access_token: ${{ github.token }}

    - uses: haskell/actions/setup@v1 
      name: Setup Haskell Stack
      with:
        ghc-version: ${{ matrix.ghc }}
        stack-version: ${{ matrix.stack }}
        enable-stack: true

    - uses: actions/cache@v2
      name: Cache ~/.stack
      with:
        path: ~/.stack
        key: ${{ runner.os }}-${{ matrix.ghc }}-stack

    - uses: actions/checkout@v2
    - name: Run tests
      run: |
        stack test
<%={{ }}=%>
{-# START_FILE hie.yaml #-}
cradle:
  stack:
    - path: "./src"
      component: "{{name}}:lib"

    - path: "./app/Main.hs"
      component: "{{name}}:exe:{{name}}-exe"

    - path: "./app/Paths_haskell_toy_example.hs"
      component: "{{name}}:exe:{{name}}-exe"

    - path: "./test"
      component: "{{name}}:test:{{name}}-test"


{-# START_FILE .gitignore #-}
# Stack
.stack-work
stack.yaml.lock
.stack-work/
.stack/
*~
*.swp
*.swo
.DS_Store
# IDE
.idea/
# Aux files
*.o
*.hi
*.hie
*.chi
*.chs.h
*.dyn_o
*.dyn_hi
*.prof
*.aux
*.hp
*.eventlog
{{name}}.cabal
hls.log
cabal.project.local
cabal.project.local~
.ghc.environment.*
hls.log
